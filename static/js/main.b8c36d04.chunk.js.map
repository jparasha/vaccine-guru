{"version":3,"sources":["interceptor.js","utils.js","Components/SearchComponent.js","Components/Tile.js","Components/ResultComponent.js","App.js","reportWebVitals.js","index.js"],"names":["interceptor","axios","create","baseURL","process","getFormattedDate","date","Date","year","getFullYear","month","getMonth","toString","padStart","day","getDate","manageEvents","event","preventDefault","stopPropagation","SearchComponent","data","searchHandler","useState","pinCode","setPinCode","className","required","type","value","onChange","target","placeholder","input_placeholder","onClick","length","search_button_text","Tile","ResultComponent","response","errors","CONSTANTS","centers","console","log","RESULTS_FOUND","ERROR_MSG","map","center","index","district_name","name","state_name","fee_type","from","to","sessions","_available_capacity","_min_age_limit","_vaccine","forEach","session","available_capacity","min_age_limit","vaccine","toFixed","App","hospitals","setHospitals","setErrors","pin","get","then","catch","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b8c36d04.chunk.js","sourcesContent":["import axios from 'axios';\r\n\r\nconst interceptor = axios.create({\r\n    baseURL: process.env.REACT_APP_BASE_URL || ''\r\n});\r\n\r\nexport default interceptor;\r\n","\r\nexport const getFormattedDate = (date = new Date()) => {\r\n    const year = date.getFullYear();\r\n    const month = (1 + date.getMonth()).toString().padStart(2, '0');\r\n    const day = date.getDate().toString().padStart(2, '0');\r\n    return (day + '-' + month + '-' + year);\r\n};\r\n\r\n","import { useState } from 'react';\r\nimport './search.css';\r\n\r\nconst manageEvents = event => {\r\n    event.preventDefault();\r\n    event.stopPropagation();\r\n};\r\n\r\nconst SearchComponent = ({ data = {}, searchHandler }) => {\r\n    const [pinCode, setPinCode] = useState('');\r\n\r\n    const onPinChange = (event = {}) => {\r\n        manageEvents(event);\r\n        const { value = '' } = event.target || {};\r\n        value !== pinCode && setPinCode(value);\r\n    };\r\n\r\n    const onSearch = event => {\r\n        manageEvents(event);\r\n        (searchHandler && pinCode.length === 6) && searchHandler(pinCode);\r\n    };\r\n\r\n    return (\r\n        <div className='container'>\r\n            <form className='search'>\r\n                <div className='search__row'>\r\n                    <input\r\n                        required\r\n                        type='number'\r\n                        value={pinCode}\r\n                        onChange={onPinChange}\r\n                        className='search__input'\r\n                        placeholder={data.input_placeholder || ''}\r\n                    />\r\n                </div>\r\n                <div className='search__row'>\r\n                    <button type='submit' className='search__button' onClick={onSearch}>\r\n                        {data.search_button_text || 'check'}\r\n                    </button>\r\n                </div>\r\n            </form>\r\n        </div>\r\n    );\r\n\r\n};\r\n\r\nexport default SearchComponent;\r\n","import './Tile.css';\r\n\r\nconst Tile = ({ data = '' }) => {\r\n    return (\r\n        <span className='tile'>\r\n            {data}\r\n        </span>\r\n    );\r\n};\r\n\r\nexport default Tile;\r\n","import './results.css';\r\nimport { Fragment } from 'react';\r\nimport Tile from './Tile';\r\n\r\nconst ResultComponent = ({ response = {}, errors = false, data: CONSTANTS = {} }) => {\r\n    const { centers = [] } = response || {};\r\n\r\n    console.log(centers);\r\n\r\n    return (\r\n        <Fragment>\r\n            {(centers && !errors) && <h2 className='container result-count'>{`${centers.length} ${CONSTANTS.RESULTS_FOUND}`}</h2>}\r\n            <div className='centers'>\r\n                {\r\n                    (errors) ?\r\n                        <div className='center' >\r\n                            {CONSTANTS.ERROR_MSG || ''}\r\n                        </div>\r\n                        :\r\n                        centers.map(\r\n                            (center = {}, index = '') => {\r\n                                const { district_name = '', name = '', state_name = '', fee_type = '', from = '', to = '', sessions = [] } = center;\r\n                                let _available_capacity = '', _min_age_limit = '', _vaccine = '';\r\n                                return (\r\n                                    <div className='center' key={index}>\r\n\r\n                                        <div className='center__tiles'>\r\n                                            <Tile data={fee_type} />\r\n                                            <Tile data={`${from}-${to}`} />\r\n                                        </div>\r\n                                        <div className='center__title'>\r\n                                            <h5 className='no-margin center__title-primary'><strong>{name}</strong></h5>\r\n                                            <h6 className='no-margin center__title-secondary'>{`${district_name}, ${state_name}`}</h6>\r\n                                        </div>\r\n                                        {\r\n                                            sessions.forEach((session = {}) => {\r\n                                                const { available_capacity = '', min_age_limit = '', vaccine = '', date = '' } = session;\r\n                                                _available_capacity = _available_capacity || available_capacity;\r\n                                                _min_age_limit = _min_age_limit || min_age_limit;\r\n                                                _vaccine = _vaccine || vaccine;\r\n                                            })\r\n                                        }\r\n                                        <div className='card__age-limit'>\r\n                                            <div>{`${_min_age_limit}+ age`}</div>\r\n                                            <div>{`${_available_capacity.toFixed() || 'not'} available`}</div>\r\n                                            <div>{`${_vaccine || 'coviShield'}`}</div>\r\n                                        </div>\r\n                                    </div>\r\n                                );\r\n                            })\r\n                }\r\n\r\n            </div>\r\n        </Fragment>\r\n    );\r\n\r\n};\r\n\r\nexport default ResultComponent;\r\n","import './App.css';\nimport { useState } from 'react';\nimport CONSTANTS from './constants.json';\nimport axios from './interceptor';\nimport { getFormattedDate } from './utils';\nimport SearchComponent from './Components/SearchComponent';\nimport ResultComponent from './Components/ResultComponent';\n\n\nfunction App() {\n\n  const [hospitals, setHospitals] = useState(null);\n  const [errors, setErrors] = useState(false);\n\n\n  const searchHandler = pin => {\n    console.log(pin, getFormattedDate());\n    axios.get(`calendarByPin?pincode=${pin}&date=${getFormattedDate()}`)\n      .then(({ data = {} }) => setHospitals(data))\n      .catch(() => setErrors(true));\n  };\n\n  return (\n    <div className=\"App\">\n      <SearchComponent\n        data={CONSTANTS}\n        searchHandler={searchHandler}\n      />\n      {<ResultComponent\n        response={hospitals}\n        data={CONSTANTS}\n        errors={errors}\n      />}\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}